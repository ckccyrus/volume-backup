pipeline{
    options {
        disableConcurrentBuilds() // Prevent this jenkins project run in parallel
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20')) //Remove old builds
    }
    parameters {
        string(
            name: 'backup_agent',
            defaultValue: '',
            description: 'Required param for choosing which agent u want to backup'
        )
        string(
            name: 'target_volumes_path',
            defaultValue: '',
            description: 'Required param for choosing which Volumes u want to backup'
        )
        string(
            name: 'folder_blacklist',
            defaultValue: '',
            description: 'Optional param for choosing which folders u want to ignore'
        )
    }
    agent {
        label "$env.backup_agent"
    }
    tools {
        nodejs 'nodejs' // NodeJs configured in Jenkins -> Global Tools Configuration -> NodeJS section
    }
    stages {
        stage('Checkout'){
            steps {
                script {
                    echo '==========================='
                    echo 'Start checking out ...'

                    if (params.backup_agent == '' || params.target_volumes_path == '') {
                        currentBuild.result = 'FAILURE'
                        error('backup_agent OR target_volumes_path not set')
                    }

                    echo 'Finish checking out ...'
                    echo '==========================='
                }
            }
        }
        stage('Set:Env'){
            steps {
                script {
                    echo '==========================='
                    echo 'Start setting Env ...'

                    Date curDate = new Date();
                    String curMonth = curDate.format('MM');
                    String curYear = curDate.format('YYYY');
                    String curDay = curDate.format('dd');

                    env.CUR_MONTH = curMonth;
                    env.CUR_YEAR = curYear;
                    env.CUR_DAY = curDay;

                    env.CURDATE_DIR = env.CUR_YEAR + '-' + env.CUR_MONTH + '-' + env.CUR_DAY;
                    env.DIST_DIR = env.WORKSPACE_DIR + env.CUR_YEAR + '-' + env.CUR_MONTH + '-' + env.CUR_DAY;

                    def volumeName = env.target_volumes_path.split('/')[2]
                    env.VOLUMES_NAME = volumeName;

                    echo '=============Environment Variables=============='
                    sh 'printenv'
                    echo '=============/Environment Variables=============='

                    echo 'Finish setting Env ...'
                    echo '==========================='
                }
            }
        }
        stage('Run:CodeBackup'){
            steps {
                script {
                    echo '==========================='
                    echo 'Start running volumes backup ...'

                    dir("$env.GIT_FOLDER_PATH"){
                        sh "pwd"
                        sh "ls"
                        sh "npm install"

                        sh ('node index.js -- -- VOLUME_PATH $target_volumes_path -- CURDATE $CURDATE_DIR -- BLACKLIST $folder_blacklist')
                    }

                    echo 'Finish running volumes backup ...'
                    echo '==========================='
                }
            }
        }
        stage('Publish:zipToBackupVolume'){
            steps {
                script {
                    echo '==========================='
                    echo 'Start publishing zip to backup volumes ...'
                    String curdateFolder = "/Volumes/BackupVolume/$env.CURDATE_DIR/"

                    sh "pwd"
                    sh "mkdir -p /Volumes/BackupVolume/$env.CURDATE_DIR/$env.VOLUMES_NAME"
                    sh "cp -a $env.GIT_FOLDER_PATH/workspace/$env.CURDATE_DIR/. /Volumes/BackupVolume/$env.CURDATE_DIR/$env.VOLUMES_NAME"

                    echo 'Finish publishing zip to backup volumes ...'
                    echo '==========================='
                }
            }
        }
    }
}